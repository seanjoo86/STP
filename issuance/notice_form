import React, { useState, useRef } from 'react';

const NoticeForm = () => {
  const [formData, setFormData] = useState({
    board: '',
    title: '',
    department: '',
    content: ''
  });
  const [status, setStatus] = useState({ type: '', message: '' });
  const [attachments, setAttachments] = useState([]);
  const [images, setImages] = useState([]);
  const fileInputRef = useRef();
  const imageInputRef = useRef();

  const boardTypes = ['공시', '공지사항', 'FAQ', '투표등록'];
  const departments = ['한화신탁', '한화계좌', '한화유통'];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileUpload = (e, type) => {
    const files = Array.from(e.target.files);
    const maxSize = type === 'image' ? 5 * 1024 * 1024 : 10 * 1024 * 1024; // 5MB or 10MB
    
    files.forEach(file => {
      if (file.size > maxSize) {
        setStatus({
          type: 'error',
          message: `파일 크기가 ${maxSize / 1024 / 1024}MB를 초과할 수 없습니다.`
        });
        return;
      }

      if (type === 'image') {
        if (!['image/jpeg', 'image/png', 'image/gif'].includes(file.type)) {
          setStatus({
            type: 'error',
            message: '지원하지 않는 이미지 형식입니다. (JPG, PNG, GIF만 가능)'
          });
          return;
        }
        setImages(prev => [...prev, file]);
      } else {
        if (!['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 
             'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'].includes(file.type)) {
          setStatus({
            type: 'error',
            message: '지원하지 않는 파일 형식입니다. (PDF, DOCX, XLSX만 가능)'
          });
          return;
        }
        setAttachments(prev => [...prev, file]);
      }
    });
  };

  const handleRemoveFile = (index, type) => {
    if (type === 'image') {
      setImages(prev => prev.filter((_, i) => i !== index));
    } else {
      setAttachments(prev => prev.filter((_, i) => i !== index));
    }
  };

  const insertTable = () => {
    const table = '\n|제목1|제목2|제목3|\n|---|---|---|\n|내용1|내용2|내용3|\n';
    setFormData(prev => ({
      ...prev,
      content: prev.content + table
    }));
  };

  const isFormValid = () => {
    return formData.board && formData.title && formData.department && formData.content;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!isFormValid()) {
      setStatus({
        type: 'error',
        message: '모든 필수 항목을 입력해주세요.'
      });
      return;
    }
    
    // 실제 구현에서는 API 호출
    setStatus({
      type: 'success',
      message: '공지사항이 성공적으로 등록되었습니다.'
    });
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* 제목 */}
      <h1 className="text-2xl font-bold text-center mb-8">공지사항</h1>

      {/* 상태 메시지 */}
      {status.message && (
        <div className={`mb-6 p-4 rounded ${
          status.type === 'success' ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
        }`}>
          {status.message}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* 게시판 선택 */}
        <div>
          <label className="block text-sm font-medium mb-2">게시판 *</label>
          <select
            name="board"
            value={formData.board}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          >
            <option value="">선택하세요</option>
            {boardTypes.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </div>

        {/* 제목 입력 */}
        <div>
          <label className="block text-sm font-medium mb-2">제목 *</label>
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleInputChange}
            placeholder="제목을 입력하여 주세요."
            className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>

        {/* 협조 요청 부서 */}
        <div>
          <label className="block text-sm font-medium mb-2">협조 요청 부서 *</label>
          <select
            name="department"
            value={formData.department}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          >
            <option value="">선택하세요</option>
            {departments.map(dept => (
              <option key={dept} value={dept}>{dept}</option>
            ))}
          </select>
        </div>

        {/* 내용 입력 */}
        <div>
          <label className="block text-sm font-medium mb-2">내용 *</label>
          <div className="mb-2 space-x-2">
            <button
              type="button"
              onClick={insertTable}
              className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded"
            >
              표 삽입
            </button>
            <button
              type="button"
              onClick={() => imageInputRef.current.click()}
              className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded"
            >
              이미지 삽입
            </button>
            <button
              type="button"
              onClick={() => fileInputRef.current.click()}
              className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded"
            >
              첨부파일 삽입
            </button>
          </div>
          <textarea
            name="content"
            value={formData.content}
            onChange={handleInputChange}
            placeholder="내용을 입력하여 주세요."
            className="w-full h-64 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>

        {/* 파일 업로드 input */}
        <input
          type="file"
          ref={imageInputRef}
          onChange={(e) => handleFileUpload(e, 'image')}
          accept="image/jpeg,image/png,image/gif"
          className="hidden"
          multiple
        />
        <input
          type="file"
          ref={fileInputRef}
          onChange={(e) => handleFileUpload(e, 'file')}
          accept=".pdf,.docx,.xlsx"
          className="hidden"
          multiple
        />

        {/* 업로드된 이미지 목록 */}
        {images.length > 0 && (
          <div className="space-y-2">
            <h3 className="font-medium">업로드된 이미지</h3>
            {images.map((file, index) => (
              <div key={index} className="flex items-center justify-between py-2 px-3 bg-gray-50 rounded">
                <span>{file.name}</span>
                <button
                  type="button"
                  onClick={() => handleRemoveFile(index, 'image')}
                  className="text-red-500 hover:text-red-700"
                >
                  삭제
                </button>
              </div>
            ))}
          </div>
        )}

        {/* 업로드된 첨부파일 목록 */}
        {attachments.length > 0 && (
          <div className="space-y-2">
            <h3 className="font-medium">첨부파일</h3>
            {attachments.map((file, index) => (
              <div key={index} className="flex items-center justify-between py-2 px-3 bg-gray-50 rounded">
                <span>{file.name}</span>
                <button
                  type="button"
                  onClick={() => handleRemoveFile(index, 'file')}
                  className="text-red-500 hover:text-red-700"
                >
                  삭제
                </button>
              </div>
            ))}
          </div>
        )}

        {/* 등록 버튼 */}
        <div className="flex justify-center pt-4">
          <button
            type="submit"
            disabled={!isFormValid()}
            className={`px-6 py-2 rounded text-white ${
              isFormValid() 
                ? 'bg-blue-500 hover:bg-blue-600' 
                : 'bg-gray-300 cursor-not-allowed'
            }`}
          >
            등록
          </button>
        </div>
      </form>
    </div>
  );
};

export default NoticeForm;

// 공지 관리