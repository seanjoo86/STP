import React, { useState } from 'react';

const Modal = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white rounded-lg shadow-lg max-w-2xl w-full mx-4">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold">{title}</h3>
        </div>
        <div className="p-4">
          {children}
        </div>
      </div>
    </div>
  );
};

const ProgressBar = ({ startDate, endDate, currentDate }) => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  const current = new Date(currentDate);
  
  const total = end.getTime() - start.getTime();
  const progress = current.getTime() - start.getTime();
  const percentage = Math.min(100, Math.max(0, (progress / total) * 100));

  const blocks = '█'.repeat(Math.round(percentage / 10)) + '░'.repeat(10 - Math.round(percentage / 10));

  return (
    <div className="flex items-center gap-2 font-mono">
      <span>{blocks}</span>
      <span className="text-sm text-gray-600 whitespace-nowrap">
        ({percentage.toFixed(0)}%)
      </span>
    </div>
  );
};

const DisposalStatus = () => {
  const [selectedStock, setSelectedStock] = useState('');
  const [showStockDialog, setShowStockDialog] = useState(false);
  const [status, setStatus] = useState({ type: '', message: '' });

  // 샘플 데이터
  const stocks = [
    { id: 1, name: 'BTS-Butter' },
    { id: 2, name: 'BTS-DNA' },
  ];

  const step1Data = [
    {
      id: 1,
      suspensionDate: '2025-03-31',
      status: '거래 정지',
      holderCount: 99,
    }
  ];

  const step2Data = [
    {
      id: 1,
      liquidationPeriod: '2025-03-31~2025-04-06',
      status: '개시',
    }
  ];

  const step3Data = [
    {
      id: 1,
      round: 1,
      expectedPrice: '100,000,000',
      auctionPeriod: {
        start: '2025-04-07',
        end: '2025-04-14',
      },
      result: '실패',
      winningBid: '-',
      progressDate: '2025-04-14', // 종료일로 설정하여 100% 표시
    },
    {
      id: 2,
      round: 2,
      expectedPrice: '90,000,000',
      auctionPeriod: {
        start: '2025-04-15',
        end: '2025-04-22',
      },
      result: '-',
      winningBid: '-',
      progressDate: '2025-04-16', // 20% 진행 상태를 보여주기 위한 날짜
    }
  ];

  const handleStockSelect = (stock) => {
    setSelectedStock(stock.name);
    setShowStockDialog(false);
  };

  const handleNoticeResult = () => {
    // 실제 구현에서는 API 호출
    setStatus({ 
      type: 'success', 
      message: '결과 공시가 성공적으로 완료되었습니다.' 
    });
  };

  // 스텝별 테이블 컴포넌트
  const StepTable = ({ title, children }) => (
    <div className="mb-8">
      <h2 className="text-lg font-semibold mb-4">{title}</h2>
      <div className="overflow-x-auto rounded-lg border border-gray-200">
        {children}
      </div>
    </div>
  );

  return (
    <div className="p-6">
      {/* 제목 */}
      <h1 className="text-2xl font-bold text-center mb-6">처분 현황</h1>

      {/* 상태 메시지 */}
      {status.message && (
        <div className={`mb-4 p-4 rounded ${
          status.type === 'success' ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
        }`}>
          {status.message}
        </div>
      )}

      {/* 검색 필터 */}
      <div className="mb-6">
        <label className="block text-sm font-medium mb-2">종목 선택</label>
        <div className="flex gap-2">
          <input 
            type="text"
            value={selectedStock} 
            readOnly 
            placeholder="종목을 선택하세요"
            className="flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button 
            onClick={() => setShowStockDialog(true)}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            찾아보기
          </button>
        </div>
      </div>

      {selectedStock ? (
        <>
          {/* STEP 1: 거래정지 */}
          <StepTable title="STEP 1: 거래정지">
            <table className="w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">거래정지 기준일</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">상태</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">잔고보유자 수</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {step1Data.map((data) => (
                  <tr key={data.id}>
                    <td className="px-4 py-3">{data.suspensionDate}</td>
                    <td className="px-4 py-3">{data.status}</td>
                    <td className="px-4 py-3">{data.holderCount}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </StepTable>

          {/* STEP 2: 정리매매 */}
          <StepTable title="STEP 2: 정리매매">
            <table className="w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">정리매매 기간</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">상태</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {step2Data.map((data) => (
                  <tr key={data.id}>
                    <td className="px-4 py-3">{data.liquidationPeriod}</td>
                    <td className="px-4 py-3">{data.status}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </StepTable>

          {/* STEP 3: 공매 */}
          <StepTable title="STEP 3: 공매">
            <table className="w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">공매 회차</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">공매예정 가격</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">공매 기간</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">진행 상황</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">공매 결과</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-700">낙찰 가격</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {step3Data.map((data) => (
                  <tr key={data.id}>
                    <td className="px-4 py-3">{data.round}</td>
                    <td className="px-4 py-3">{data.expectedPrice}원</td>
                    <td className="px-4 py-3">
                      {`${data.auctionPeriod.start}~${data.auctionPeriod.end}`}
                    </td>
                    <td className="px-4 py-3 min-w-[200px]">
                      <ProgressBar 
                        startDate={data.auctionPeriod.start}
                        endDate={data.auctionPeriod.end}
                        currentDate={data.progressDate}
                      />
                    </td>
                    <td className="px-4 py-3">{data.result}</td>
                    <td className="px-4 py-3">{data.winningBid}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </StepTable>

          {/* 결과 공시 버튼 */}
          <div className="flex justify-center mt-8">
            <button
              onClick={handleNoticeResult}
              className="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              결과 공시
            </button>
          </div>
        </>
      ) : (
        <div className="text-center text-gray-500">종목을 선택해주세요.</div>
      )}

      {/* 종목 선택 모달 */}
      <Modal
        isOpen={showStockDialog}
        onClose={() => setShowStockDialog(false)}
        title="종목 선택"
      >
        <div className="space-y-2">
          {stocks.map((stock) => (
            <div
              key={stock.id}
              className="p-2 hover:bg-gray-100 cursor-pointer rounded"
              onClick={() => handleStockSelect(stock)}
            >
              {stock.name}
            </div>
          ))}
        </div>
      </Modal>
    </div>
  );
};

export default DisposalStatus;

// 처분 현황