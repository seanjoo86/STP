import React, { useState } from 'react';

const Modal = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white rounded-lg shadow-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold">{title}</h3>
        </div>
        <div className="p-4">
          {children}
        </div>
      </div>
    </div>
  );
};

const CustomerInquiry = () => {
  const [showDetail, setShowDetail] = useState(false);
  const [selectedInquiry, setSelectedInquiry] = useState(null);
  const [replyContent, setReplyContent] = useState('');
  const [department, setDepartment] = useState('');
  const [status, setStatus] = useState({ type: '', message: '' });

  // 샘플 데이터
  const inquiries = [
    {
      id: 101,
      datetime: '2025-05-02 12:55:11',
      customerName: '최*호',
      accountNumber: '900-***456-11',
      type: '세금',
      title: '전문투자자는 세금 유형이 어떻게 되나요?',
      status: '답변 전',
      content: '안녕하세요. 전문투자자로 등록되어 있는데, 세금 유형이 어떻게 되는지 궁금합니다. 일반 투자자와 차이가 있나요?',
      attachment: {
        name: 'IMG_0016.PNG',
        url: '#'
      }
    }
  ];

  const departments = ['한화신탁', '한화계좌', '한화유통'];

  const handleRowClick = (inquiry) => {
    setSelectedInquiry(inquiry);
    setShowDetail(true);
    setReplyContent('');
    setDepartment('');
  };

  const handleDownload = (filename) => {
    try {
      // 실제 구현에서는 파일 다운로드 로직 추가
      console.log('Downloading:', filename);
    } catch (error) {
      setStatus({
        type: 'error',
        message: '첨부파일을 다운로드할 수 없습니다.'
      });
    }
  };

  const handleReplySubmit = () => {
    if (!replyContent.trim()) {
      setStatus({
        type: 'error',
        message: '답글 내용을 입력하세요.'
      });
      return;
    }

    // 실제 구현에서는 API 호출
    try {
      setStatus({
        type: 'success',
        message: '답글이 성공적으로 등록되었습니다.'
      });
      setShowDetail(false);
      // 테이블의 상태 업데이트
      selectedInquiry.status = '답변 완료';
    } catch (error) {
      setStatus({
        type: 'error',
        message: '답글 등록 중 오류가 발생했습니다. 다시 시도해주세요.'
      });
    }
  };

  return (
    <div className="p-6">
      {/* 제목 */}
      <h1 className="text-2xl font-bold text-center mb-8">고객문의</h1>

      {/* 상태 메시지 */}
      {status.message && (
        <div className={`mb-4 p-4 rounded ${
          status.type === 'success' ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
        }`}>
          {status.message}
        </div>
      )}

      {/* 문의게시글 테이블 */}
      <div className="overflow-x-auto rounded-lg border border-gray-200">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-3 text-left font-medium text-gray-700">No.</th>
              <th className="px-4 py-3 text-left font-medium text-gray-700">문의일시</th>
              <th className="px-4 py-3 text-left font-medium text-gray-700">고객명</th>
              <th className="px-4 py-3 text-left font-medium text-gray-700">계좌번호</th>
              <th className="px-4 py-3 text-left font-medium text-gray-700">문의유형</th>
              <th className="px-4 py-3 text-left font-medium text-gray-700">제목</th>
              <th className="px-4 py-3 text-left font-medium text-gray-700">상태</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {inquiries.map((inquiry) => (
              <tr 
                key={inquiry.id}
                className="hover:bg-gray-50 cursor-pointer"
                onClick={() => handleRowClick(inquiry)}
              >
                <td className="px-4 py-3">{inquiry.id}</td>
                <td className="px-4 py-3">{inquiry.datetime}</td>
                <td className="px-4 py-3">{inquiry.customerName}</td>
                <td className="px-4 py-3">{inquiry.accountNumber}</td>
                <td className="px-4 py-3">{inquiry.type}</td>
                <td className="px-4 py-3">{inquiry.title}</td>
                <td className="px-4 py-3">{inquiry.status}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* 상세 팝업 */}
      <Modal
        isOpen={showDetail}
        onClose={() => setShowDetail(false)}
        title="문의 상세"
      >
        {selectedInquiry && (
          <div className="space-y-6">
            {/* 상세 정보 */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">문의일시</label>
                <div className="px-3 py-2 bg-gray-50 rounded">
                  {selectedInquiry.datetime}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">고객명</label>
                <div className="px-3 py-2 bg-gray-50 rounded">
                  {selectedInquiry.customerName}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">계좌번호</label>
                <div className="px-3 py-2 bg-gray-50 rounded">
                  {selectedInquiry.accountNumber}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">문의유형</label>
                <div className="px-3 py-2 bg-gray-50 rounded">
                  {selectedInquiry.type}
                </div>
              </div>
              <div className="col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">제목</label>
                <div className="px-3 py-2 bg-gray-50 rounded">
                  {selectedInquiry.title}
                </div>
              </div>
            </div>

            {/* 문의 내용 */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">문의내용</label>
              <div className="px-3 py-2 bg-gray-50 rounded whitespace-pre-wrap">
                {selectedInquiry.content}
              </div>
            </div>

            {/* 첨부파일 */}
            {selectedInquiry.attachment && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">첨부파일</label>
                <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 rounded">
                  <span>{selectedInquiry.attachment.name}</span>
                  <button
                    onClick={() => handleDownload(selectedInquiry.attachment.name)}
                    className="text-blue-500 hover:text-blue-700"
                  >
                    다운로드
                  </button>
                </div>
              </div>
            )}

            {/* 답글 작성 */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">답글 작성</label>
              <textarea
                value={replyContent}
                onChange={(e) => setReplyContent(e.target.value)}
                placeholder="답글을 입력하세요."
                className="w-full h-32 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>

            {/* 협조 요청 부서 */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">협조 요청 부서</label>
              <select
                value={department}
                onChange={(e) => setDepartment(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">선택하세요</option>
                {departments.map(dept => (
                  <option key={dept} value={dept}>{dept}</option>
                ))}
              </select>
            </div>

            {/* 답글 등록 버튼 */}
            <div className="flex justify-center pt-4">
              <button
                onClick={handleReplySubmit}
                disabled={!replyContent.trim()}
                className={`px-6 py-2 rounded text-white ${
                  replyContent.trim() 
                    ? 'bg-blue-500 hover:bg-blue-600' 
                    : 'bg-gray-300 cursor-not-allowed'
                }`}
              >
                답글 등록
              </button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default CustomerInquiry;

// 1:1 고객 문의