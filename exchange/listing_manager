import React, { useState } from 'react';
import { Search, FileText, CheckCircle, XCircle, AlertCircle } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

const ListingManagement = () => {
  // 상태 관리
  const [activeTab, setActiveTab] = useState('applications'); // 'applications' | 'listings'
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [searchFilters, setSearchFilters] = useState({
    status: '',
    dateRange: { start: '', end: '' },
    issuerName: '',
    assetType: ''
  });

  // 샘플 데이터
  const applications = [
    {
      id: 'APP001',
      issuerName: '뮤직카드',
      status: '검토중',
      applyDate: '2024-01-15',
      assetType: '해외음악IP',
      details: {
        accountNumber: '123-456-789',
        attachments: ['사업자등록증.pdf', '계약서.pdf']
      }
    },
    {
      id: 'APP002',
      issuerName: '그린에너지',
      status: '승인',
      applyDate: '2024-01-14',
      assetType: '신재생에너지',
      details: {
        accountNumber: '987-654-321',
        attachments: ['사업계획서.pdf']
      }
    }
  ];

  const listings = [
    {
      id: 'LST001',
      issuerName: '뮤직카드',
      itemCode: 'MUS001',
      status: '상장',
      listingDate: '2024-01-16',
      assetType: '해외음악IP',
      details: {
        issuanceAmount: '1,000,000',
        attachments: ['상장신청서.pdf']
      }
    }
  ];

  // 필터링된 데이터 가져오기
  const getFilteredData = () => {
    const data = activeTab === 'applications' ? applications : listings;
    return data.filter(item => {
      if (searchFilters.status && item.status !== searchFilters.status) return false;
      if (searchFilters.issuerName && !item.issuerName.includes(searchFilters.issuerName)) return false;
      if (searchFilters.assetType && item.assetType !== searchFilters.assetType) return false;
      return true;
    });
  };

  // 상세 정보 모달
  const DetailModal = ({ item, onClose }) => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-full max-w-2xl p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-bold">상세 정보</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <XCircle size={24} />
          </button>
        </div>
        
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">발행인명</label>
              <p className="mt-1">{item.issuerName}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">상태</label>
              <p className="mt-1">{item.status}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                {activeTab === 'applications' ? '신청일' : '상장일'}
              </label>
              <p className="mt-1">{activeTab === 'applications' ? item.applyDate : item.listingDate}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">기초자산 유형</label>
              <p className="mt-1">{item.assetType}</p>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">첨부파일</label>
            <div className="mt-1 space-y-2">
              {item.details.attachments.map((file, index) => (
                <div key={index} className="flex items-center gap-2 text-blue-600">
                  <FileText size={16} />
                  <span>{file}</span>
                </div>
              ))}
            </div>
          </div>

          {activeTab === 'applications' && item.status === '검토중' && (
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => handleApprove(item.id)}
                className="flex-1 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
              >
                승인
              </button>
              <button
                onClick={() => handleReject(item.id)}
                className="flex-1 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
              >
                반려
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  // 상태에 따른 배지 컴포넌트
  const StatusBadge = ({ status }) => {
    const getStatusStyle = () => {
      switch (status) {
        case '검토중':
          return 'bg-yellow-100 text-yellow-800';
        case '승인':
          return 'bg-green-100 text-green-800';
        case '반려':
          return 'bg-red-100 text-red-800';
        case '상장':
          return 'bg-blue-100 text-blue-800';
        default:
          return 'bg-gray-100 text-gray-800';
      }
    };

    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusStyle()}`}>
        {status}
      </span>
    );
  };

  // 테이블 헤더
  const TableHeader = () => (
    <div className="bg-gray-50 border-b">
      <div className="grid grid-cols-5 px-6 py-3 text-left text-sm font-medium text-gray-500">
        <div>ID</div>
        <div>발행인명</div>
        <div>상태</div>
        <div>{activeTab === 'applications' ? '신청일' : '상장일'}</div>
        <div>기초자산 유형</div>
      </div>
    </div>
  );

  // 테이블 행
  const TableRow = ({ item }) => (
    <div 
      className="grid grid-cols-5 px-6 py-4 text-sm text-gray-900 border-b hover:bg-gray-50 cursor-pointer"
      onClick={() => {
        setSelectedItem(item);
        setShowDetailModal(true);
      }}
    >
      <div>{item.id}</div>
      <div>{item.issuerName}</div>
      <div><StatusBadge status={item.status} /></div>
      <div>{activeTab === 'applications' ? item.applyDate : item.listingDate}</div>
      <div>{item.assetType}</div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <Card className="max-w-6xl mx-auto">
        <CardHeader>
          <CardTitle>상장 관리</CardTitle>
        </CardHeader>
        <CardContent>
          {/* 탭 */}
          <div className="border-b mb-6">
            <div className="flex gap-4">
              <button
                className={`px-4 py-2 font-medium ${
                  activeTab === 'applications' 
                    ? 'text-blue-600 border-b-2 border-blue-600' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
                onClick={() => setActiveTab('applications')}
              >
                시장 참가 신청
              </button>
              <button
                className={`px-4 py-2 font-medium ${
                  activeTab === 'listings' 
                    ? 'text-blue-600 border-b-2 border-blue-600' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
                onClick={() => setActiveTab('listings')}
              >
                상장 종목
              </button>
            </div>
          </div>

          {/* 검색 필터 */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                발행인명
              </label>
              <div className="flex gap-2">
                <input
                  type="text"
                  className="flex-1 p-2 border rounded"
                  value={searchFilters.issuerName}
                  onChange={(e) => setSearchFilters({
                    ...searchFilters,
                    issuerName: e.target.value
                  })}
                  placeholder="발행인명 입력"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                기초자산 유형
              </label>
              <select
                className="w-full p-2 border rounded"
                value={searchFilters.assetType}
                onChange={(e) => setSearchFilters({
                  ...searchFilters,
                  assetType: e.target.value
                })}
              >
                <option value="">전체</option>
                <option value="해외음악IP">해외음악IP</option>
                <option value="신재생에너지">신재생에너지</option>
                <option value="EV충전">EV충전</option>
              </select>
            </div>
          </div>

          {/* 테이블 */}
          <div className="border rounded-lg overflow-hidden">
            <TableHeader />
            <div className="divide-y">
              {getFilteredData().map((item) => (
                <TableRow key={item.id} item={item} />
              ))}
            </div>
          </div>

          {/* 상세 정보 모달 */}
          {showDetailModal && selectedItem && (
            <DetailModal 
              item={selectedItem} 
              onClose={() => {
                setShowDetailModal(false);
                setSelectedItem(null);
              }}
            />
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ListingManagement;

// 상장 관리