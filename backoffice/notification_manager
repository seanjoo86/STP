import React, { useState } from 'react';
import { Bell, Search, Clock, Calendar, Send } from 'lucide-react';

const InputField = ({ label, type = "text", value, onChange, placeholder, className = "" }) => (
  <div className={`mb-4 ${className}`}>
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <input
      type={type}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      placeholder={placeholder}
      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
  </div>
);

const SelectField = ({ label, value, onChange, options }) => (
  <div className="mb-4">
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <select
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
    >
      {options.map(option => (
        <option key={option} value={option}>{option}</option>
      ))}
    </select>
  </div>
);

const SearchField = ({ label, value, onChange, onSearch, placeholder }) => (
  <div className="mb-4">
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <div className="flex gap-2">
      <input
        type="text"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button
        onClick={onSearch}
        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center gap-2"
      >
        <Search className="w-4 h-4" />
        검색
      </button>
    </div>
  </div>
);

const NotificationManagement = () => {
  const [notification, setNotification] = useState({
    businessType: "출납",
    serviceType: "",
    subCategory: "",
    sendCycle: "발생당일",
    sendTime: "08:30",
    message: "[한화투자증권] 고객님의 월렛으로 이벤트토큰이 입고되었습니다.\n확인하기: http://htz.34pud.gyz",
    startDate: new Date().toISOString().split('T')[0],
    status: "active"
  });

  const [notificationsList, setNotificationsList] = useState([]);
  const [searchResults, setSearchResults] = useState({
    serviceTypes: [],
    subCategories: []
  });

  const businessTypes = ["CRM", "출납", "매매", "권리", "청약", "금융상품", "종목시세", "이벤트"];
  const sendCycles = ["발생당일", "익일", "익월 첫영업일"];

  const handleInputChange = (field, value) => {
    setNotification(prev => ({ ...prev, [field]: value }));
  };

  const validateTimeFormat = (time) => {
    const pattern = /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/;
    return pattern.test(time);
  };

  const validateNotification = () => {
    if (!notification.serviceType || !notification.subCategory) {
      alert('알리미서비스 구분과 세부분류를 선택해주세요.');
      return false;
    }
    if (!validateTimeFormat(notification.sendTime)) {
      alert('발송시간 형식이 올바르지 않습니다. (HH:MM)');
      return false;
    }
    if (!notification.message.trim()) {
      alert('발송문구를 입력해주세요.');
      return false;
    }
    return true;
  };

  const handleSearch = (type) => {
    // 실제 API 호출 대신 임시 데이터
    const mockServiceTypes = ["입출고", "매매체결", "시세알림"];
    const mockSubCategories = ["입금", "출금", "토큰입고", "토큰출고"];
    
    if (type === 'service') {
      setSearchResults(prev => ({ ...prev, serviceTypes: mockServiceTypes }));
    } else {
      setSearchResults(prev => ({ ...prev, subCategories: mockSubCategories }));
    }
  };

  const addNotification = () => {
    if (!validateNotification()) return;

    const newNotification = {
      ...notification,
      id: Date.now(),
      createdAt: new Date().toISOString()
    };

    setNotificationsList(prev => [newNotification, ...prev]);
    
    // 폼 초기화
    setNotification(prev => ({
      ...prev,
      serviceType: "",
      subCategory: "",
      message: "",
      startDate: new Date().toISOString().split('T')[0]
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto bg-white rounded-lg shadow-lg">
        <div className="p-6 border-b border-gray-200">
          <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Bell className="w-6 h-6" />
            알림 관리
          </h1>
        </div>

        <div className="p-6 grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-6">
            <SelectField
              label="업무 구분"
              value={notification.businessType}
              onChange={(value) => handleInputChange("businessType", value)}
              options={businessTypes}
            />

            <SearchField
              label="알리미서비스 구분"
              value={notification.serviceType}
              onChange={(value) => handleInputChange("serviceType", value)}
              onSearch={() => handleSearch('service')}
              placeholder="검색어를 입력하세요"
            />
            {searchResults.serviceTypes.length > 0 && (
              <div className="mt-2 p-2 border rounded-md bg-gray-50">
                {searchResults.serviceTypes.map(type => (
                  <div
                    key={type}
                    onClick={() => {
                      handleInputChange("serviceType", type);
                      setSearchResults(prev => ({ ...prev, serviceTypes: [] }));
                    }}
                    className="px-3 py-2 hover:bg-gray-100 cursor-pointer rounded"
                  >
                    {type}
                  </div>
                ))}
              </div>
            )}

            <SearchField
              label="알리미 세부분류"
              value={notification.subCategory}
              onChange={(value) => handleInputChange("subCategory", value)}
              onSearch={() => handleSearch('sub')}
              placeholder="검색어를 입력하세요"
            />
            {searchResults.subCategories.length > 0 && (
              <div className="mt-2 p-2 border rounded-md bg-gray-50">
                {searchResults.subCategories.map(category => (
                  <div
                    key={category}
                    onClick={() => {
                      handleInputChange("subCategory", category);
                      setSearchResults(prev => ({ ...prev, subCategories: [] }));
                    }}
                    className="px-3 py-2 hover:bg-gray-100 cursor-pointer rounded"
                  >
                    {category}
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="space-y-6">
            <SelectField
              label="발송주기"
              value={notification.sendCycle}
              onChange={(value) => handleInputChange("sendCycle", value)}
              options={sendCycles}
            />

            <div className="flex gap-4">
              <InputField
                label="발송시간"
                type="text"
                value={notification.sendTime}
                onChange={(value) => handleInputChange("sendTime", value)}
                placeholder="HH:MM"
                className="flex-1"
              />
              <InputField
                label="시행일"
                type="date"
                value={notification.startDate}
                onChange={(value) => handleInputChange("startDate", value)}
                className="flex-1"
              />
            </div>

            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">발송문구</label>
              <textarea
                value={notification.message}
                onChange={(e) => handleInputChange("message", e.target.value)}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <p className="text-sm text-gray-500">
                {notification.message.length}/300자
              </p>
            </div>
          </div>
        </div>

        <div className="p-6 border-t border-gray-200">
          <button
            onClick={addNotification}
            className="w-full px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center justify-center gap-2"
          >
            <Send className="w-5 h-5" />
            알리미 신청
          </button>
        </div>

        <div className="p-6 border-t border-gray-200">
          <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <Bell className="w-5 h-5" />
            알림 리스트
          </h2>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">업무 구분</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">서비스 구분</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">세부분류</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">발송주기</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">발송시간</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">시행일</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">상태</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {notificationsList.map((item) => (
                  <tr key={item.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.businessType}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.serviceType}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.subCategory}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.sendCycle}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.sendTime}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.startDate}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        활성
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NotificationManagement;

// 알림 관리