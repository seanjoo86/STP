import React, { useState } from 'react';
import { Code, Search, Plus, Filter, ArrowUpDown, ExternalLink, Copy } from 'lucide-react';

const StatusBadge = ({ status }) => {
  const styles = {
    active: 'bg-green-100 text-green-800',
    pending: 'bg-yellow-100 text-yellow-800',
    deprecated: 'bg-red-100 text-red-800'
  };

  return (
    <span className={`px-2 py-1 rounded-full text-xs font-medium ${styles[status]}`}>
      {status.charAt(0).toUpperCase() + status.slice(1)}
    </span>
  );
};

const InterfaceManagement = () => {
  const [activeTab, setActiveTab] = useState('category');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');

  // 샘플 데이터
  const categories = [
    { id: 'PORT', name: '서비스', description: '발행 포털', count: 8 },
    { id: 'goods', name: '웹뷰', description: '상품 상세 페이지', count: 12 },
    { id: 'inquiryShop', name: 'Rest API', description: '마켓 인터페이스 연계', count: 15 },
    { id: 'SB01', name: 'CCF', description: '발행 등록 연계', count: 10 },
    { id: 'AC', name: 'TR', description: '계좌 연계', count: 25 }
  ];

  const interfaces = [
    { 
      id: 'AC5104Q1', 
      categoryId: 'AC',
      name: 'OS체결잔고_계좌별평가금액조회',
      version: '1.2.0',
      type: 'java',
      status: 'active',
      lastUpdated: '2024-01-15',
      description: 'OS체결잔고_계좌별평가금액조회'
    },
    { 
      id: 'AC2951Q1',
      categoryId: 'AC', 
      name: 'OS사절원팝업여부',
      version: '2.0.0',
      type: 'java',
      status: 'active',
      lastUpdated: '2024-01-14',
      description: 'OS사절원팝업여부'
    },
    { 
      id: 'AC4205Q1',
      categoryId: 'AC', 
      name: 'OS법인잔고통보계좌조회',
      version: '1.0.1',
      type: 'java',
      status: 'deprecated',
      lastUpdated: '2024-01-10',
      description: 'OS법인잔고통보계좌조회'
    }
  ];

  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const SortableHeader = ({ field, label }) => (
    <th 
      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50"
      onClick={() => handleSort(field)}
    >
      <div className="flex items-center gap-2">
        {label}
        <ArrowUpDown className="w-4 h-4" />
      </div>
    </th>
  );

  const renderCategories = () => (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <div className="flex gap-2">
          <div className="relative">
            <Search className="w-5 h-5 absolute left-3 top-2.5 text-gray-400" />
            <input
              type="text"
              placeholder="카테고리 검색..."
              className="pl-10 pr-4 py-2 border rounded-lg w-64"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <button className="px-3 py-2 border rounded-lg text-gray-600 flex items-center gap-2">
            <Filter className="w-4 h-4" />
            필터
          </button>
        </div>
        <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
          <Plus className="w-4 h-4" />
          카테고리 추가
        </button>
      </div>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <SortableHeader field="id" label="카테고리 ID" />
              <SortableHeader field="name" label="카테고리명" />
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">설명</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">인터페이스 수</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {categories.map((category) => (
              <tr key={category.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-blue-600 cursor-pointer">
                    {category.id}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">{category.name}</div>
                </td>
                <td className="px-6 py-4">
                  <div className="text-sm text-gray-500">{category.description}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-500">{category.count}</div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );

  const renderInterfacePool = () => (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <div className="flex gap-2">
          <div className="relative">
            <Search className="w-5 h-5 absolute left-3 top-2.5 text-gray-400" />
            <input
              type="text"
              placeholder="인터페이스 검색..."
              className="pl-10 pr-4 py-2 border rounded-lg w-64"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <button className="px-3 py-2 border rounded-lg text-gray-600 flex items-center gap-2">
            <Filter className="w-4 h-4" />
            필터
          </button>
        </div>

      </div>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">카테고리 ID</th>
              <SortableHeader field="id" label="인터페이스 ID" />
              <SortableHeader field="name" label="인터페이스명" />
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">버전</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">타입</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">상태</th>
              <SortableHeader field="lastUpdated" label="최종 수정일" />
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">작업</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {interfaces.map((interface_) => (
              <tr key={interface_.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {interface_.categoryId}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-blue-600 cursor-pointer">
                    {interface_.id}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">{interface_.name}</div>
                  <div className="text-sm text-gray-500">{interface_.description}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {interface_.version}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {interface_.type}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <StatusBadge status={interface_.status} />
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {interface_.lastUpdated}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex gap-2">
                    <button 
                      className="text-blue-600 hover:text-blue-900"
                      title="코드 보기"
                    >
                      <Code className="w-4 h-4" />
                    </button>
                    <button 
                      className="text-gray-600 hover:text-gray-900"
                      title="복사"
                    >
                      <Copy className="w-4 h-4" />
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">인터페이스 관리</h1>
        
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="px-4 py-2 border-b">
            <div className="flex gap-4">
              <button
                className={`px-4 py-2 rounded-lg ${
                  activeTab === 'category'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
                onClick={() => setActiveTab('category')}
              >
                카테고리 관리
              </button>
              <button
                className={`px-4 py-2 rounded-lg ${
                  activeTab === 'pool'
                    ? 'bg-blue-50 text-blue-700 font-medium'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
                onClick={() => setActiveTab('pool')}
              >
                인터페이스 Pool
              </button>
            </div>
          </div>
          
          <div className="p-4">
            {activeTab === 'category' ? renderCategories() : renderInterfacePool()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterfaceManagement;

// 인터페이스 관리