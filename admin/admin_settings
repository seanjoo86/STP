import React, { useState } from 'react';
import { Settings, Users, Bell, Shield, Lock, Key, PlusCircle, Edit2 } from 'lucide-react';

const TabButton = ({ active, icon: Icon, label, onClick }) => (
  <button
    onClick={onClick}
    className={`flex items-center gap-2 px-4 py-2 rounded-lg ${
      active 
        ? 'bg-blue-50 text-blue-700 font-medium'
        : 'text-gray-600 hover:bg-gray-50'
    }`}
  >
    <Icon className="w-5 h-5" />
    {label}
  </button>
);

const SettingToggle = ({ enabled, onChange }) => (
  <button
    className={`relative inline-flex h-6 w-11 items-center rounded-full ${
      enabled ? 'bg-blue-600' : 'bg-gray-200'
    }`}
    onClick={() => onChange(!enabled)}
  >
    <span
      className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
        enabled ? 'translate-x-6' : 'translate-x-1'
      }`}
    />
  </button>
);

const AdminSettings = () => {
  const [activeTab, setActiveTab] = useState('permissions');
  
  const roles = [
    { id: 1, name: '시스템 관리자', users: 5, permissions: 'all' },
    { id: 2, name: '운영자', users: 12, permissions: 'read,write' },
    { id: 3, name: '모니터링', users: 8, permissions: 'read' }
  ];

  const users = [
    { id: 1, name: '김관리', email: 'admin@company.com', role: '시스템 관리자', lastAccess: '2024-01-15 14:30' },
    { id: 2, name: '이운영', email: 'operator@company.com', role: '운영자', lastAccess: '2024-01-15 13:45' }
  ];

  const [settings, setSettings] = useState({
    backup: { enabled: true, name: '자동 백업', description: '매일 00:00 시스템 백업 수행' },
    monitoring: { enabled: true, name: '시스템 모니터링', description: '실시간 시스템 상태 모니터링' },
    audit: { enabled: true, name: '감사 로그', description: '시스템 접근 및 변경 이력 기록' }
  });

  const [notifications, setNotifications] = useState({
    system: { enabled: true, name: '시스템 알림', channels: ['email', 'slack'] },
    security: { enabled: true, name: '보안 알림', channels: ['email', 'sms'] },
    updates: { enabled: false, name: '업데이트 알림', channels: ['email'] }
  });

  const renderPermissions = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow">
        <div className="p-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-medium">역할 관리</h2>
            <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
              <PlusCircle className="w-4 h-4" />
              역할 추가
            </button>
          </div>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">역할명</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">사용자 수</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">권한</th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">작업</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {roles.map((role) => (
                <tr key={role.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{role.name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {role.users}명
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {role.permissions}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button className="text-blue-600 hover:text-blue-900">
                      <Edit2 className="w-4 h-4" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow">
        <div className="p-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-medium">사용자 관리</h2>
            <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
              <PlusCircle className="w-4 h-4" />
              사용자 추가
            </button>
          </div>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">이름</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">이메일</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">역할</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">최근 접속</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {users.map((user) => (
                <tr key={user.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{user.name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {user.email}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {user.role}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {user.lastAccess}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-lg font-medium">시스템 설정</h2>
        </div>
        <div className="p-4 space-y-4">
          {Object.entries(settings).map(([key, setting]) => (
            <div key={key} className="flex items-center justify-between py-4">
              <div>
                <h3 className="text-sm font-medium text-gray-900">{setting.name}</h3>
                <p className="text-sm text-gray-500">{setting.description}</p>
              </div>
              <SettingToggle
                enabled={setting.enabled}
                onChange={(enabled) => 
                  setSettings(prev => ({
                    ...prev,
                    [key]: { ...prev[key], enabled }
                  }))
                }
              />
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderNotifications = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-lg font-medium">알림 설정</h2>
        </div>
        <div className="p-4 space-y-4">
          {Object.entries(notifications).map(([key, notification]) => (
            <div key={key} className="flex items-center justify-between py-4">
              <div>
                <h3 className="text-sm font-medium text-gray-900">{notification.name}</h3>
                <p className="text-sm text-gray-500">
                  활성화된 채널: {notification.channels.join(', ')}
                </p>
              </div>
              <SettingToggle
                enabled={notification.enabled}
                onChange={(enabled) =>
                  setNotifications(prev => ({
                    ...prev,
                    [key]: { ...prev[key], enabled }
                  }))
                }
              />
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">관리자 설정</h1>
        
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="px-4 py-2 border-b">
            <div className="flex gap-4">
              <TabButton
                active={activeTab === 'permissions'}
                icon={Shield}
                label="권한 관리"
                onClick={() => setActiveTab('permissions')}
              />
              <TabButton
                active={activeTab === 'settings'}
                icon={Settings}
                label="시스템 설정"
                onClick={() => setActiveTab('settings')}
              />
              <TabButton
                active={activeTab === 'notifications'}
                icon={Bell}
                label="알림 설정"
                onClick={() => setActiveTab('notifications')}
              />
            </div>
          </div>
          
          <div className="p-4">
            {activeTab === 'permissions' && renderPermissions()}
            {activeTab === 'settings' && renderSettings()}
            {activeTab === 'notifications' && renderNotifications()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminSettings;

// 관리자 설정 대시보드